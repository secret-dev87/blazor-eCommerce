@page "/products/{id:int}"
@inject IProductService ProductService

@if (product == null)
{
	<span>@message</span>
}
else
{
	<div class="media">
		<div class="media-img-wrapper mr-2">
			<img class="media-img" src="@product.ImageUrl" alt="@product.Title">
		</div>
		<div class="media-body">
			<h2 cclass="mb-0">@product.Title</h2>
			<p>@product.Description</p>
			@if(product.Variants != null && product.Variants.Count > 1)
			{
				<div class="mb-3">
					<select class="form-select" @bind="currentTypeId">
						@foreach (var variant in product.Variants)
						{
							<option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
						}
					</select>
				</div>
			}
			@if(GetSelectedVariant() != null)
			{
				@* it makes original price look small and crossed if it is lower than current price*@
				@if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
				{
					<h6 class="text-muted original-price">
						$@GetSelectedVariant().OriginalPrice
					</h6>
				}
				<h4 class="price">
					$@GetSelectedVariant().Price
				</h4>
			}
		</div>
	</div>
}


@code {
	private Product? product = null;
	private string message = string.Empty;
	private int currentTypeId = 1;

	//Because this code block is not a class
	//I must add a key word to specify the field as a Parameter
	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		message = "Loading Product...";

		var result = await ProductService.GetProduct(Id);
		if (!result.Success)
		{
			message = result.Message;
		}
		else
		{
			product = result.Data;
			if (product.Variants.Count > 0)
			{
				currentTypeId = product.Variants[0].ProductTypeId;
			}
		}
	}

	private ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}
}
